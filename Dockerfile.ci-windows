## base image
FROM ubuntu:22.04 AS base

ARG extra_libraries

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update -y -qq && apt-get install --no-install-recommends -y gnupg wget curl apt-transport-https software-properties-common && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
# keys used by apt
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1E9377A2BA9EF27F
# Install packages available from standard repos
RUN apt-get update -y && \
    apt-get install -yq \
        gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 wget curl pkg-config zip unzip tar git build-essential && \
    apt-get install -y  \
        mingw-w64 mingw-w64-tools binutils bison \
        ${extra_libraries} \
        python3 python3-pip doxygen graphviz \
        cmake make ninja-build ccache cppcheck cmake-extras \
        clang clang-tidy clang-format \
        valgrind gcovr linux-tools-common linux-tools-generic google-perftools \
        neovim emacs nano && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# install powershell
ENV PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache
ADD https://github.com/PowerShell/PowerShell/releases/download/v7.2.5/powershell-lts_7.2.5-1.deb_amd64.deb /tmp/powershell.deb
RUN apt-get update -y && apt-get install -y /tmp/powershell.deb && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    rm /tmp/powershell.deb
ENV POWERSHELL_TELEMETRY_OPTOUT 1

# install mxe (old)
#RUN apt-get update -y && \
#    apt-get install -y  \
#        software-properties-common lsb-release && \
#    apt-get clean && rm -rf /var/lib/apt/lists/*
#RUN apt-key adv \
#    --keyserver keyserver.ubuntu.com \
#    --recv-keys 86B72ED9 && \
#    add-apt-repository \
#        "deb [arch=amd64] https://pkg.mxe.cc/repos/apt `lsb_release -sc` main" && \
#    apt-get update -y
#RUN apt-get update -y && apt-get install -y mxe-x86-64-w64-mingw32.shared-cc mxe-x86-64-w64-mingw32.static-cc mxe-x86-64-w64-mingw32.shared-cmake mxe-x86-64-w64-mingw32.static-cmake
#ENV PATH="/usr/lib/mxe/usr/bin:${PATH}"

# Install conan
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install conan && \
    conan --version
# Install more pip tools
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install cogapp coverage cmake-format cmakelint

# install task
ADD https://taskfile.dev/install.sh /tmp/taskfile_install.sh
RUN chmod +x /tmp/taskfile_install.sh
RUN /tmp/taskfile_install.sh -d -b /usr/local/bin && rm /tmp/taskfile_install.sh


# thx to https://github.com/lefticus/cpp_starter_project/pull/121

# By default, anything you run in Docker is done as superuser.
# Conan runs some install commands as superuser, and will prepend `sudo` to
# these commands, unless `CONAN_SYSREQUIRES_SUDO=0` is in your env variables.
ENV CONAN_SYSREQUIRES_SUDO 0
# Some packages request that Conan use the system package manager to install
# a few dependencies. This flag allows Conan to proceed with these installations;
# leaving this flag undefined can cause some installation failures.
ENV CONAN_SYSREQUIRES_MODE enabled

ENV CMAKE "cmake"
ENV MAKE "make"
ENV CC "x86_64-w64-mingw32-gcc"
ENV CXX "x86_64-w64-mingw32-g++"

# setup project env
WORKDIR /home/project



## ci image for windows build
FROM base AS ci-base-windows

ARG extra_libraries
ARG vcpkg_host_triplet="x64-linux"
ARG processor="x86_64"

# e.g. x64-mingw-dynamic
ARG vcpkg_target_triplet="x64-mingw-dynamic"

ARG cc="x86_64-w64-mingw32-gcc"
ARG cxx="x86_64-w64-mingw32-g++"
ARG cmake="cmake"
ARG make="ninja"
ARG cmake_generator="Ninja"
ARG cmake_toolchain_file="/home/cmake/x86_64-w64-mingw32.toolchain.cmake"
ARG cross_root "/usr/x86_64-w64-mingw32"


# compiler env settings
# e.g. mingw-env, emsdk_env.sh
RUN mkdir -p /home/cross
RUN touch /home/cross/.bashrc
ARG setup_env_script="/home/cross/.bashrc"
ARG setup_env_script_args=""
ENV SETUP_ENV_SCRIPT $setup_env_script
ENV SETUP_ENV_SCRIPT_ARGS $setup_env_script_args
RUN echo 'source "$SETUP_ENV_SCRIPT $SETUP_ENV_SCRIPT_ARGS"' >> /root/.bash_profile
RUN . $setup_env_script $setup_env_script_args

# cross compiler settings
ENV CC $cc
ENV CXX $cxx
ENV CMAKE $cmake
ENV MAKE $make

ENV PROCESSOR $processor
ENV TARGET_TRIPLET $vcpkg_target_triplet
ENV CROSS_CMAKE $cmake
ENV CROSS_MAKE $make
ENV CROSS "${cross_triple}-"
ENV CROSS_ROOT $cross_root
ENV CROSS_TOOLCHAIN $cmake_toolchain_file


# install vcpkg
## https://github.com/microsoft/vcpkg/blob/master/docs/users/mingw.md
ENV VCPKG_DEFAULT_HOST_TRIPLET $vcpkg_host_triplet
ENV VCPKG_DEFAULT_TRIPLET $vcpkg_target_triplet
ENV VCPKG_DISABLE_METRICS 1
RUN git clone --depth 1 https://github.com/Microsoft/vcpkg.git /home/vcpkg
RUN /home/vcpkg/bootstrap-vcpkg.sh -disableMetrics
ENV VCPKG_ROOT "/home/vcpkg"

ENV VCPKG_TOOLCHAIN_FILE "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
ENV TOOLCHAIN_FILE "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"


# build script settings
ENV TARGET "all"
ENV BUILD_TYPE "Release"
ENV CMAKE_GENERATOR $cmake_generator
ENV CHAINLOAD_TOOLCHAIN_FILE $cmake_toolchain_file
ENV CMAKE_ARGS ""

# setup project env
WORKDIR /home/project
COPY ./cmake /home/cmake
COPY ./scripts/docker-build.ci-mingw.sh ./docker-build.sh
COPY ./taskfiles/*.yml /home/taskfiles/
COPY ./taskfiles/TaskfileCross.yml /home/taskfiles/Taskfile.yml

ENV PROJECT_DIR /home/project
WORKDIR /home/project
RUN mkdir build
