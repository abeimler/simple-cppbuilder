## base image
FROM ubuntu:22.04 AS base

ARG extra_libraries

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update -yqq && \
    apt-get install --no-install-recommends -y gnupg software-properties-common && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
# Install packages available from standard repos
RUN apt-get update -yqq && \
    apt-get install --no-install-recommends -yq \
        gcc wget curl pkg-config zip unzip tar git build-essential && \
    apt-get install --no-install-recommends -y  \
        clang binutils bison \
        ${extra_libraries} \
        python3 python3-pip doxygen graphviz \
        cmake make ninja-build ccache cppcheck cmake-extras \
        clang-tidy clang-format \
        valgrind gcovr linux-tools-common linux-tools-generic google-perftools \
        neovim emacs nano && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
#bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

# Install conan
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install conan && \
    conan --version
# Install more pip tools
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install cogapp coverage cmake-format cmakelint

# thx to https://github.com/lefticus/cpp_starter_project/pull/121

# By default, anything you run in Docker is done as superuser.
# Conan runs some install commands as superuser, and will prepend `sudo` to
# these commands, unless `CONAN_SYSREQUIRES_SUDO=0` is in your env variables.
ENV CONAN_SYSREQUIRES_SUDO 0
# Some packages request that Conan use the system package manager to install
# a few dependencies. This flag allows Conan to proceed with these installations;
# leaving this flag undefined can cause some installation failures.
ENV CONAN_SYSREQUIRES_MODE enabled

# set default compiler
ENV CC "gcc"
ENV CXX "g++"
ENV CMAKE "cmake"
ENV MAKE "ninja"

# setup project env
WORKDIR /home/project



## ci image
FROM base as ci-base

# default compiler versions
ARG extra_libraries

# Install packages available from standard repos
RUN apt-get update -y && \
    apt-get install --no-install-recommends -y  \
        git ${extra_libraries} \
        curl gnupg coreutils && \
    apt-get clean && rm -rf /var/lib/apt/lists/*


# set default compiler
ENV CC "gcc"
ENV CXX "g++"
ENV CMAKE "cmake"
ENV MAKE "ninja"

# build script settings
ENV TARGET "all"
ENV BUILD_TYPE "Release"
ENV CMAKE_GENERATOR "Ninja"
ENV CMAKE_ARGS ""

# install CodeCov
WORKDIR /home/codecov
RUN curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
ADD https://uploader.codecov.io/latest/alpine/codecov codecov
ADD https://uploader.codecov.io/latest/alpine/codecov.SHA256SUM codecov.SHA256SUM
ADD https://uploader.codecov.io/latest/alpine/codecov.SHA256SUM.sig codecov.SHA256SUM.sig
RUN gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
RUN shasum -a 256 -c codecov.SHA256SUM
RUN chmod +x codecov
ENV CODECOV "/home/codecov/codecov"

# setup project env
WORKDIR /home/project
COPY ./scripts/docker-build.sh ./docker-build.sh
COPY ./scripts/docker-test.sh ./docker-test.sh
COPY ./scripts/docker-test-coverage.sh ./docker-test-coverage.sh

# install vcpkg
ENV VCPKG_DISABLE_METRICS 1
RUN git clone --depth 1 https://github.com/Microsoft/vcpkg.git /home/project/vcpkg
RUN /home/project/vcpkg/bootstrap-vcpkg.sh -disableMetrics
ENV VCPKG_ROOT "/home/project/vcpkg"

ENV VCPKG_TOOLCHAIN_FILE "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
ENV TOOLCHAIN_FILE "$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

ENV PROJECT_DIR /home/project
WORKDIR /home/project
RUN mkdir build

COPY ./scripts/docker-entrypoint.ci.sh /docker-entrypoint.sh
ENTRYPOINT ["/bin/bash", "-c", "/docker-entrypoint.sh"]
CMD ["/bin/bash"]