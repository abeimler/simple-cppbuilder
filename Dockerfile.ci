## base image
FROM ubuntu:22.04 as base

ARG extra_libraries

ENV DEBIAN_FRONTEND noninteractive
RUN apt update -y && apt install software-properties-common -y && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt update -y
# Install packages available from standard repos
RUN apt update -y && \
    apt install -yq \
        gcc wget curl pkg-config zip unzip tar git build-essential && \
    apt install -y  \
        clang binutils bison \
        ${extra_libraries} \
        python3 python3-pip doxygen graphviz \
        cmake make ninja-build ccache cppcheck cmake-extras \
        valgrind gcovr linux-tools-common linux-tools-generic google-perftools \
        neovim emacs nano && \
    rm -rf /var/lib/apt/lists/*
#bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

# Install conan
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install conan && \
    conan --version
# Install more pip tools
RUN python3 -m pip install --upgrade pip setuptools && \
    python3 -m pip install cogapp coverage

# thx to https://github.com/lefticus/cpp_starter_project/pull/121

# By default, anything you run in Docker is done as superuser.
# Conan runs some install commands as superuser, and will prepend `sudo` to
# these commands, unless `CONAN_SYSREQUIRES_SUDO=0` is in your env variables.
ENV CONAN_SYSREQUIRES_SUDO 0
# Some packages request that Conan use the system package manager to install
# a few dependencies. This flag allows Conan to proceed with these installations;
# leaving this flag undefined can cause some installation failures.
ENV CONAN_SYSREQUIRES_MODE enabled

ENV CMAKE "cmake"
ENV MAKE "ninja"

# set default compiler
ENV CC "gcc"
ENV CXX "g++"

# setup project env
WORKDIR /home/project



## ci image
FROM base as ci-base

# default compiler versions
ARG extra_libraries

# Install packages available from standard repos
RUN apt update -y && \
    apt install -yq \
        gcc wget curl pkg-config zip unzip tar git build-essential && \
    apt install -y  \
        clang binutils bison \
        ${extra_libraries} \
        cmake make ninja-build && \
    rm -rf /var/lib/apt/lists/*


# set default compiler
ENV CC "gcc"
ENV CXX "g++"

# setup project env
WORKDIR /home/project
COPY ./scripts/docker-build.sh ./docker-build.sh
COPY ./scripts/docker-test.sh ./docker-test.sh

# install vcpkg
ENV VCPKG_DISABLE_METRICS 1
RUN git clone --depth 1 https://github.com/Microsoft/vcpkg.git
RUN ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
ENV VCPKG_ROOT "/home/project/vcpkg"

# build script settings
ENV TARGET "all"
ENV BUILD_TYPE "Release"
ENV CMAKE_GENERATOR "Ninja"
ENV VCPKG_TOOLCHAIN_FILE "/home/project/vcpkg/scripts/buildsystems/vcpkg.cmake"
ENV TOOLCHAIN_FILE "/home/project/vcpkg/scripts/buildsystems/vcpkg.cmake"
ENV CMAKE_ARGS ""

ENV CMAKE "cmake"
ENV MAKE "make"

RUN mkdir build
ENTRYPOINT ["/usr/bin/bash"]
#CMD ["./docker-build.sh"]