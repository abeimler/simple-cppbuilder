## base image
FROM abeimler/simple-cppbuilder:base as base

ARG extra_libraries
ARG vcpkg_target_triplet="wasm32-emscripten"
ARG vcpkg_host_triplet="x64-linux"

# Install packages available from standard repos
RUN pacman-db-upgrade && \
    pacman -Syyu --noconfirm && pacman-db-upgrade && \
    pacman -S --noconfirm --needed \
        wget curl pkg-config zip unzip tar git go && \
    pacman -S --noconfirm  \
        npm gcc binutils bison \
        ${extra_libraries} \
        python3 python-pip doxygen graphviz cmake make ninja ccache cppcheck valgrind gcovr \
        neovim emacs nano

# install emscripten
RUN runuser -l yay -c \
    "yay -Syu --noconfirm && yay -S --noconfirm \
        nodejs emscripten emsdk" && \
    rm -rf /home/yay/.cache/*
RUN /usr/lib/emsdk/emsdk install latest && /usr/lib/emsdk/emsdk activate latest

ENV EMSDK_PATH "/usr/lib/emsdk"
ENV EMSCRIPTEN_PATH "/usr/lib/emscripten"
ENV CLANG_PATH "/opt/emscripten-llvm/bin"
ENV PYTHON_PATH "/usr/bin"
ENV NODE_PATH "/usr/bin"
ENV PATH="${EMSDK_PATH}:${EMSCRIPTEN_PATH}:${CLANG_PATH}:${NODE_PATH}:${PYTHON_PATH}:${PATH}"
RUN source /usr/lib/emsdk/emsdk_env.sh

# set default compiler
ENV CC "gcc"
ENV CXX "g++"

# setup project env
WORKDIR /home/project
COPY ./cmake ./cmake
COPY ./docker-build.emscripten.sh ./docker-build.sh

# install vcpkg
ENV VCPKG_DEFAULT_HOST_TRIPLET $vcpkg_host_triplet
ENV VCPKG_DEFAULT_TRIPLET $vcpkg_target_triplet
ENV VCPKG_DISABLE_METRICS 1
RUN git clone https://github.com/Microsoft/vcpkg.git
RUN ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
ENV VCPKG_ROOT "/home/project/vcpkg"

ENV TARGET_TRIPLET $vcpkg_target_triplet

# build script settings
ENV TARGET "all"
ENV BUILD_TYPE "Release"
ENV CMAKE_GENERATOR "Ninja"
ENV TOOLCHAIN_FILE "/home/project/vcpkg/scripts/buildsystems/vcpkg.cmake"
ENV CMAKE_ARGS ""

RUN mkdir build
ENTRYPOINT ["/usr/bin/bash"]
CMD ["./docker-build.sh"]